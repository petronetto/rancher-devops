#!/bin/bash

DOCKER_RANCHER_SERVER_NAME=rancher-server
DOCKER_RANCHER_SERVER_DATA_NAME=$DOCKER_RANCHER_SERVER_NAME-data
DOCKER_RANCHER_SERVER_VERSION=v1.3.3
DOCKER_RANCHER_SERVER_PORT_INTERNAL=8080
DOCKER_RANCHER_SERVER_PORT_EXTERNAL=8080
DOCKER_RANCHER_SERVER_API_URL="localhost:$DOCKER_RANCHER_SERVER_PORT_EXTERNAL/v1"

DOCKER_RANCHER_CLIENT_NAME=rancher-agent

TERRAFORM_TOOL_ZIP_FILENAME=terraform_0.10.0_linux_amd64.zip
TERRAFORM_TOOL_ZIP_URL=https://releases.hashicorp.com/terraform/\
0.10.0/$TERRAFORM_TOOL_ZIP_FILENAME

TERRAFORM_EXEC_NAME=terraform
TERRAFORM_EXEC=./$TERRAFORM_EXEC_NAME

function rancher-server-is-upped()
{
	test "$(curl -s $DOCKER_RANCHER_SERVER_API_URL)" == ""
	echo "$?"
}

function rancher-server-is-downloaded()
{
	RANCHER_SERVER_CONTAINER_ID=$(docker ps -a -q --filter="name=^/$DOCKER_RANCHER_SERVER_NAME$")
	test "$RANCHER_SERVER_CONTAINER_ID" == ""
	echo "$?"
}

function rancher-client-is-downloaded()
{
	RANCHER_CLIENT_CONTAINER_ID=$(docker ps -a -q --filter="name=^/$DOCKER_RANCHER_CLIENT_NAME$")
	test "$RANCHER_CLIENT_CONTAINER_ID" == ""
	echo "$?"
}

function docker-run-rancher-client-agent()
{
	local orchestration=$1
	local environment=$2
	local environment_id=$(curl -s localhost:8080/v1/projects | jq -r \
		".data[] | select(.name == \"$environment\") | .id" \
	)
	
	if [[ $(terraform-show-rancher-project-id) != $environment_id ]]; then
		terraform-plan-and-apply 'orch' $environment
		$(terraform-show-rancher-agent-cmd)
	fi
	
	if [[ $(rancher-client-is-downloaded) == "1" ]]; then
		docker start $DOCKER_RANCHER_CLIENT_NAME
		return
	fi
	
	$(terraform-show-rancher-agent-cmd)
}

function docker-run-rancher-server()
{
	if  [[ $(rancher-server-is-upped) == "1" ]]; then
		echo "Rancher Server already started!"
		return
	fi
	
	if [[ $(rancher-server-is-downloaded) == "0" ]]; then
		docker create \
			--name $DOCKER_RANCHER_SERVER_DATA_NAME \
			rancher/server:$DOCKER_RANCHER_SERVER_VERSION \
			true
	
		docker run \
			--name $DOCKER_RANCHER_SERVER_NAME \
			--restart=unless-stopped \
			--volumes-from $DOCKER_RANCHER_SERVER_DATA_NAME \
			-d \
			-p $DOCKER_RANCHER_SERVER_PORT_INTERNAL:$DOCKER_RANCHER_SERVER_PORT_EXTERNAL \
			rancher/server:$DOCKER_RANCHER_SERVER_VERSION
	else
		docker start $DOCKER_RANCHER_SERVER_NAME
	fi
	
	echo -n "Starting Rancher Server"
	while true; do
		if [[ $(rancher-server-is-upped) == "1" ]]; then
			break
		fi
		
		sleep 1
		echo -n "."
	done
	
	echo -e "\nRancher Server started!"
}

function terraform-install()
{
	if [[ ! $(which "$TERRAFORM_EXEC") ]]; then
		wget $TERRAFORM_TOOL_ZIP_URL
		unzip $TERRAFORM_TOOL_ZIP_FILENAME
		rm $TERRAFORM_TOOL_ZIP_FILENAME
		
		return
	fi
	
	echo "Terraform executable already downloaded."
}

function terraform-init()
{
	$TERRAFORM_EXEC init
}

function terraform-plan-and-apply()
{
	local method_prov_agent=$1 # orch | env
	
	case $method_prov_agent in
		'orch')
			local orchestration=$2
	
			$TERRAFORM_EXEC plan $orchestration
			$TERRAFORM_EXEC apply $orchestration
			;;
		'env')
			local environment=$2
	
			$TERRAFORM_EXEC plan $environment
			$TERRAFORM_EXEC apply $environment
			;;
		*)
			echo "Provisioner required ('orch' or 'env')"
			exit -1
	esac
}

function terraform-show-rancher-agent-cmd()
{
	local terraform_output=$($TERRAFORM_EXEC output rancher_agent_command)
	echo "$terraform_output"
}

function terraform-show-rancher-project-id()
{
	local terraform_output=$($TERRAFORM_EXEC output rancher_environment_id)
	echo "$terraform_output"
}

function main()
{
	local orchestration=$1
	local environment=$2
	
	docker-run-rancher-server
	terraform-install
	terraform-init
	terraform-plan-and-apply 'env' $orchestration
	docker-run-rancher-client-agent $orchestration $environment
}

main $*